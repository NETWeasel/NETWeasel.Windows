using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Reflection;

namespace NETWeasel.Windows
{
    internal class Weasel
    {
        private const string ASCII = @"
  __   __  ______ ______ __     __  ______  ______  ______  ______  __        
/\ ""-.\ \/\  ___/\__  _/\ \  _ \ \/\  ___\/\  __ \/\  ___\/\  ___\/\ \       
\ \ \-.  \ \  __\/_/\ \\ \ \/ "".\ \ \  __\\ \  __ \ \___  \ \  __\\ \ \____  
 \ \_\\""\_\ \_____\\ \_\\ \__/"".~\_\ \_____\ \_\ \_\/\_____\ \_____\ \_____\ 
  \/_/ \/_/\/_____/ \/_/ \/_/   \/_/\/_____/\/_/\/_/\/_____/\/_____/\/_____/ ";

        private const string STRAPLINE = "NETWeasel Windows CLI - Version {0}";

        private const string VERSION = "0.1";

        private static readonly string Introduction = $"{ASCII}\n                   {string.Format(STRAPLINE, VERSION)}";

        private string _path;
        private string _output;
        private string _specPath;
        private bool _hideNETWeaselLogo;
        private bool _preventNETWeaselCleanup;

        internal void Run(IEnumerable<string> args)
        {
            var options = new OptionSet
            {
                {"path=", "Path to the artifacts/bin directory to package application with", param => _path = param },
                {"output=", "Output directory to place all NETWeasel-generated artifacts, includes .msi and .exe files", param => _output = param },
                {"spec=", "Path to the specification for NETWeasel to package target application", param => _specPath = param },
                {"nologo", "Hides NETWeasel ASCII when running", param => _hideNETWeaselLogo = true },
                {"nocleanup", "Prevents cleaning up artifacts generated by NETWeasel during packaging, useful for debugging, but should otherwise be ignored", param => _preventNETWeaselCleanup = true },
            };

            options.Parse(args);

            if (!_hideNETWeaselLogo)
            {
                Console.WriteLine(Introduction);

                Console.WriteLine();
                Console.WriteLine();
            }

            Package();
        }

        private void Package()
        {
            // Get location for NETWeasel
            var weaselDir = Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location);

            if (!Directory.Exists(_output))
            {
                Directory.CreateDirectory(_output);
            }

            var specification = GetSpecification(_specPath);

            // Run heat do we get a file for all files that we need
            // to include in the WIX installer
            var sourceFilesWxsPath = RunHeat(weaselDir, _path, _output);

            var sourceFilesObjPath = RunCandle(weaselDir, sourceFilesWxsPath, _output, new Dictionary<string, string>
            {
                ["ProductArtifactsDir"] = _path
            });

            var productWxsPath = CreateProductWxs(weaselDir, _output);

            var productObjPath = RunCandle(weaselDir, productWxsPath, _output, new Dictionary<string, string>
            {
                ["ProductName"] = specification.ProductName,
                ["ProductVersion"] = specification.ProductVersion,
                ["ProductManufacturer"] = specification.ProductManufacturer,
                ["ProductUpgradeGuid"] = "{" + specification.UpgradeId + "}",
            });

            RunLight(weaselDir, productObjPath, sourceFilesObjPath, _output);

            if (!_preventNETWeaselCleanup)
            {
                CleanUpFiles(productWxsPath, sourceFilesWxsPath);
            }
        }

        private string CreateProductWxs(string weaselDir, string outputDir)
        {
            const string TEMPLATE_FILE = "Product.wxs";
            var wxsTemplatePath = Path.Combine(weaselDir, "template", TEMPLATE_FILE);

            var generatedFilePath = Path.Combine(outputDir, "Product.wxs");

            File.Copy(wxsTemplatePath, generatedFilePath, true);

            return generatedFilePath;
        }

        private string RunHeat(string weaselDir, string artifactsPath, string outputDir)
        {
            // Traverse to the tools folder
            var heatPath = Path.Combine(weaselDir, "tools", "heat.exe");

            var generatedFilePath = Path.Combine(outputDir, "SourceFiles.wxs");

            // Start heat, and generate the wxs for WIX
            // ARGS:
            // dir Harvests an entire directory
            // gg Generates guids for components
            // sfrag Suppress generation of fragments for directories and components.
            // template Template for the generated output
            // out Target directory/file
            // nologo Prevents printing heat logo/info to console
            var heatProc = Process.Start(heatPath, $"dir \"{artifactsPath}\" -dr INSTALLFOLDER -var var.ProductArtifactsDir -gg -cg NETWeaselFragment -ke -srd -sfrag -out \"{generatedFilePath}\" -nologo");

            heatProc?.WaitForExit();

            return generatedFilePath;
        }

        private Specification GetSpecification(string specificationPath)
        {
            if (!File.Exists(specificationPath))
            {
                throw new InvalidOperationException("Cannot compose WXS with missing NETWeasel Spec file, ensure spec.xml exists");
            }

            return SpecificationParser.Deserialize(specificationPath);
        }

        private string RunCandle(string weaselDir,
            string wxsPath,
            string outputDir,
            Dictionary<string, string> wixVariables)
        {
            var candlePath = Path.Combine(weaselDir, "tools", "candle.exe");

            var fileName = Path.GetFileNameWithoutExtension(wxsPath);

            var variables = string.Join(" ", wixVariables.Select(x => $"-d{x.Key}=\"{x.Value}\""));

            var outputPath = Path.Combine(outputDir, fileName + ".wixobj");
            var candleProc = Process.Start(candlePath, $"{variables} -out \"{outputPath}\" \"{wxsPath}\"");

            candleProc?.WaitForExit();

            return outputPath;
        }

        private void RunLight(string weaselDir,
            string productObjPath,
            string sourceFilesObjPath,
            string outputDir)
        {
            var lightPath = Path.Combine(weaselDir, "tools", "light.exe");

            var msiOutputPath = Path.Combine(outputDir, "Setup.msi");
            var lightProc = Process.Start(lightPath, $"-b \"{outputDir}\" \"{productObjPath}\" \"{sourceFilesObjPath}\" -out \"{msiOutputPath}\"");

            lightProc?.WaitForExit();
        }

        private void CleanUpFiles(params string[] paths)
        {
            foreach (var path in paths)
            {
                if (string.IsNullOrWhiteSpace(path) || !File.Exists(path))
                    continue;

                File.Delete(path);
            }
        }
    }
}
